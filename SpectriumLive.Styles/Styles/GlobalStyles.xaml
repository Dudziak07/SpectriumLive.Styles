<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:SpectriumLive.Styles.Converters">

    <converters:MenuPlacementConverter x:Key="MenuPlacementConverter"/>
    <converters:MenuArrowVisibilityConverter x:Key="MenuArrowVisibilityConverter"/>
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <!-- Button -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Button.MouseOver.Background}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Button.Pressed.Background}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Disabled.ForegroundColor}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Disabled.BackgroundColor}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Disabled.BackgroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<!-- GroupBox -->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource GroupBox.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10,15,10,10"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>

                        <Border Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5"/>

                        <Border Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"
                                Background="{DynamicResource SecondaryBackgroundColor}">
                            <TextBlock x:Name="Header"
                                       Margin="4,0,4,0"
                                       FontWeight="Bold"
                                       Text="{TemplateBinding Header}"
                                       Foreground="{DynamicResource GroupBox.Header.Foreground}"/>
                        </Border>

                        <ContentPresenter Grid.Row="2"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem -->
    <Style TargetType="MenuItem">
        <Setter Property="Foreground" Value="{DynamicResource MenuItem.Foreground}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Background" Value="{DynamicResource MenuItem.Static.Background}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            BorderThickness="1"
                            BorderBrush="Transparent">
                        <DockPanel LastChildFill="True">
                            <!-- Content -->
                            <ContentPresenter x:Name="HeaderHost"
                                              ContentSource="Header"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"/>

                            <!-- Arrow on right -->
                            <Path x:Name="Arrow"
                                  DockPanel.Dock="Right"
                                  VerticalAlignment="Center"
                                  Margin="6,0,6,0"
                                  Width="8"
                                  Height="8"
                                  Stretch="Uniform"
                                  Fill="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                  Data="M 3 3 A 1.5 1.5 0 1 1 2.999 3 Z">
                                <Path.Visibility>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Converter="{StaticResource MenuArrowVisibilityConverter}"/>
                                </Path.Visibility>
                            </Path>

                            <!-- Popup submenu -->
                            <Popup x:Name="Popup"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   PopupAnimation="Fade"
                                   Placement="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MenuPlacementConverter}}">
                                <Border Background="{DynamicResource SecondaryBackgroundColor}"
                                        BorderBrush="{DynamicResource MenuItem.Submenu.Border}"
                                        BorderThickness="1"
                                        CornerRadius="4"
                                        Padding="2">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Border>
                            </Popup>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Main menu -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="Popup" Property="Placement" Value="Bottom"/>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                        <!-- Submenu -->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter TargetName="Popup" Property="Placement" Value="Right"/>
                        </Trigger>

                        <!-- Show arrow only when has kids and parent -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasItems}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Role}" Value="SubmenuItem"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <!-- Hover -->
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuItem.MouseOver.Background}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuItem.MouseOver.Border}"/>
                        </Trigger>

                        <!-- Open submenu -->
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MenuItem.Pressed.Background}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MenuItem.Pressed.Border}"/>
                        </Trigger>

                        <!-- Change point to arrow after open submenu -->
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 5 3 L 0 6 Z"/> <!-- Arrow -->
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter TargetName="Arrow" Property="Data" Value="M 3 3 A 1.5 1.5 0 1 1 2.999 3 Z"/> <!-- Point -->
                        </Trigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Disabled.ForegroundColor}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Disabled.BackgroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu -->
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

</ResourceDictionary>